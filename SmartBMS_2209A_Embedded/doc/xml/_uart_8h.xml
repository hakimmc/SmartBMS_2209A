<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_uart_8h" kind="file" language="C++">
    <compoundname>Uart.h</compoundname>
    <includes local="yes">stdint.h</includes>
    <includes local="yes">driver/uart.h</includes>
    <includes local="yes">driver/gpio.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includedby refid="_bq76pl455_8h" local="yes">include/Bq76pl455.h</includedby>
    <includedby refid="_uart_8c" local="yes">src/Uart.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/Uart.h</label>
        <link refid="_uart_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>driver/gpio.h</label>
      </node>
      <node id="3">
        <label>driver/uart.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
      <node id="6">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>include/Bq76pl455.h</label>
        <link refid="_bq76pl455_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>include/Uart.h</label>
        <link refid="_uart_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/Bq76pl455.c</label>
        <link refid="_bq76pl455_8c"/>
      </node>
      <node id="4">
        <label>src/Uart.c</label>
        <link refid="_uart_8c"/>
      </node>
      <node id="5">
        <label>src/main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="_uart_8h_1a268262b77851c1bf5292361233c6515f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Uart_Init</definition>
        <argsstring>(uint8_t uart_pin, int baudrate, uint32_t rx_buffsize, uint8_t TXD_PIN, uint8_t RXD_PIN)</argsstring>
        <name>Uart_Init</name>
        <param>
          <type>uint8_t</type>
          <declname>uart_pin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>baudrate</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>rx_buffsize</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>TXD_PIN</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>RXD_PIN</declname>
        </param>
        <briefdescription>
<para>Initializes the UART interface. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures the UART interface with the specified parameters, including pin assignments, baud rate, and RX buffer size.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The UART port number to initialize (e.g., UART_NUM_0, UART_NUM_1). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired baud rate for communication. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_buffsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the RX buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TXD_PIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO pin number assigned for UART TX (transmit). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RXD_PIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO pin number assigned for UART RX (receive).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Initializes the UART interface.</para>
<para>This function configures the UART with the specified baud rate, data bits, stop bits, and other settings. It also assigns pins for transmission and reception and installs the UART driver.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>UART port to configure (typically 0, 1, or 2). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baudrate</parametername>
</parameternamelist>
<parameterdescription>
<para>The baud rate for the UART communication. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rx_buffsize</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the receive buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TXD_PIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO pin for UART transmission (TX). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RXD_PIN</parametername>
</parameternamelist>
<parameterdescription>
<para>The GPIO pin for UART reception (RX). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Configures the UART with the given settings.</para>
<para>&lt; Assigns pins to UART.</para>
<para>&lt; Installs the UART driver with specified buffer size.</para>
        </inbodydescription>
        <location file="include/Uart.h" line="33" column="6" bodyfile="src/Uart.c" bodystart="28" bodyend="48" declfile="include/Uart.h" declline="33" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_uart_8h_1a8856e4c8f6952db371ac9bf478c7c000" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t Uart_Transmit</definition>
        <argsstring>(uint8_t uart_pin, uint8_t *data, uint8_t data_length)</argsstring>
        <name>Uart_Transmit</name>
        <param>
          <type>uint8_t</type>
          <declname>uart_pin</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data_length</declname>
        </param>
        <briefdescription>
<para>Transmits data over UART. </para>
        </briefdescription>
        <detaileddescription>
<para>Sends a sequence of bytes through the specified UART port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The UART port number to use for transmission. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data buffer containing the bytes to transmit. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to transmit. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns <computeroutput>0</computeroutput> on success or a non-zero value if the transmission fails.</para>
</simplesect>
Transmits data over UART.</para>
<para>This function sends a specified amount of data through the UART transmission port.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>UART port to use for transmission (typically 0, 1, or 2). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the data to be transmitted. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data to be transmitted.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if transmission is successful, 0 if failed. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Writes data to UART.</para>
<para>&lt; Transmission failure.</para>
<para>&lt; Transmission success.</para>
        </inbodydescription>
        <location file="include/Uart.h" line="45" column="9" bodyfile="src/Uart.c" bodystart="61" bodyend="69" declfile="include/Uart.h" declline="45" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="_uart_8h_1a65bb7c489c4800aeb9f32917436cce36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Uart_Receive</definition>
        <argsstring>(uint8_t uart_pin, uint8_t *data, uint8_t data_length, uint32_t timeout)</argsstring>
        <name>Uart_Receive</name>
        <param>
          <type>uint8_t</type>
          <declname>uart_pin</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>data_length</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
<para>Receives data from UART. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads data from the specified UART port into a buffer, with an optional timeout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>The UART port number to use for reception. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer where received data will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum time to wait for data in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes successfully received, or a negative value on error.</para>
</simplesect>
Receives data from UART.</para>
<para>This function receives data from the UART port and stores it in the provided buffer.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_pin</parametername>
</parameternamelist>
<parameterdescription>
<para>UART port to use for reception (typically 0, 1, or 2). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to store received data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the data buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Timeout for receiving data in milliseconds.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes received or an error code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Reads data from UART into buffer.</para>
        </inbodydescription>
        <location file="include/Uart.h" line="58" column="5" bodyfile="src/Uart.c" bodystart="83" bodyend="86" declfile="include/Uart.h" declline="58" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_uart_8h_1a086601e2a6bb2527f8c1f02e0b828576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t IsTimeout</definition>
        <argsstring>(uint32_t max_reach_time)</argsstring>
        <name>IsTimeout</name>
        <param>
          <type>uint32_t</type>
          <declname>max_reach_time</declname>
        </param>
        <briefdescription>
<para>Checks for a timeout condition. </para>
        </briefdescription>
        <detaileddescription>
<para>Determines if a given time has exceeded the specified maximum time limit.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_reach_time</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum allowable time in milliseconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns <computeroutput>1</computeroutput> if the timeout condition is met, or <computeroutput>0</computeroutput> otherwise.</para>
</simplesect>
Checks for a timeout condition.</para>
<para>This function checks if the specified maximum time has passed since the start of the function call.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_reach_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time in ticks to wait before timing out.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if timeout occurred, 1 if still within the allowed time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Get current tick count.</para>
<para>&lt; Wait for the timeout period to pass.</para>
<para>&lt; Timeout reached.</para>
<para>&lt; Timeout not reached.</para>
        </inbodydescription>
        <location file="include/Uart.h" line="68" column="9" bodyfile="src/Uart.c" bodystart="97" bodyend="106" declfile="include/Uart.h" declline="68" declcolumn="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>UART driver interface for ESP32. </para>
    </briefdescription>
    <detaileddescription>
<para>This header file provides the function declarations for initializing and using UART communication on the ESP32.</para>
<para>Created on: 18 Dec 2024 <simplesect kind="author"><para>hakimmc </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDE_UART_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_UART_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdint.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/uart.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;driver/gpio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_uart_8h_1a268262b77851c1bf5292361233c6515f" kindref="member">Uart_Init</ref>(uint8_t<sp/>uart_pin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>baudrate,<sp/>uint32_t<sp/>rx_buffsize,<sp/>uint8_t<sp/>TXD_PIN,<sp/>uint8_t<sp/>RXD_PIN);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal">uint8_t<sp/><ref refid="_uart_8h_1a8856e4c8f6952db371ac9bf478c7c000" kindref="member">Uart_Transmit</ref>(uint8_t<sp/>uart_pin,<sp/>uint8_t<sp/>*data,<sp/>uint8_t<sp/>data_length);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_uart_8h_1a65bb7c489c4800aeb9f32917436cce36" kindref="member">Uart_Receive</ref>(uint8_t<sp/>uart_pin,<sp/>uint8_t*<sp/>data,<sp/>uint8_t<sp/>data_length,<sp/>uint32_t<sp/>timeout);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">uint8_t<sp/><ref refid="_uart_8h_1a086601e2a6bb2527f8c1f02e0b828576" kindref="member">IsTimeout</ref>(uint32_t<sp/>max_reach_time);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>INCLUDE_UART_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="include/Uart.h"/>
  </compounddef>
</doxygen>
