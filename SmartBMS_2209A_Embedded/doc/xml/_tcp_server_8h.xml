<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="_tcp_server_8h" kind="file" language="C++">
    <compoundname>TcpServer.h</compoundname>
    <includes local="no">lwip/sockets.h</includes>
    <includes local="no">esp_log.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="yes">freertos/FreeRTOS.h</includes>
    <includes local="yes">freertos/task.h</includes>
    <includes local="yes">esp_system.h</includes>
    <includes refid="_wifi_8h" local="yes">Wifi.h</includes>
    <includes local="yes">esp_ping.h</includes>
    <includes local="yes">ping/ping_sock.h</includes>
    <includes local="yes">nvs_flash.h</includes>
    <includes local="yes">freertos/event_groups.h</includes>
    <includes local="yes">esp_wifi.h</includes>
    <includes local="yes">esp_event.h</includes>
    <includes refid="d2cc__lib_8h" local="yes">d2cc_lib.h</includes>
    <includedby refid="_tcp_server_8c" local="yes">src/TcpServer.c</includedby>
    <includedby refid="_uart_8c" local="yes">src/Uart.c</includedby>
    <includedby refid="main_8c" local="yes">src/main.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>include/TcpServer.h</label>
        <link refid="_tcp_server_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>Wifi.h</label>
        <link refid="_wifi_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>d2cc_lib.h</label>
        <link refid="d2cc__lib_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>errno.h</label>
      </node>
      <node id="12">
        <label>esp_event.h</label>
      </node>
      <node id="3">
        <label>esp_log.h</label>
      </node>
      <node id="14">
        <label>esp_netif.h</label>
      </node>
      <node id="20">
        <label>esp_ping.h</label>
      </node>
      <node id="8">
        <label>esp_system.h</label>
      </node>
      <node id="11">
        <label>esp_wifi.h</label>
      </node>
      <node id="6">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="10">
        <label>freertos/event_groups.h</label>
      </node>
      <node id="7">
        <label>freertos/task.h</label>
      </node>
      <node id="15">
        <label>inttypes.h</label>
      </node>
      <node id="18">
        <label>lwip/netdb.h</label>
      </node>
      <node id="2">
        <label>lwip/sockets.h</label>
      </node>
      <node id="13">
        <label>nvs_flash.h</label>
      </node>
      <node id="19">
        <label>ping/ping_sock.h</label>
      </node>
      <node id="23">
        <label>stdbool.h</label>
      </node>
      <node id="22">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
      <node id="17">
        <label>sys/time.h</label>
      </node>
      <node id="16">
        <label>time.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>include/TcpServer.h</label>
        <link refid="_tcp_server_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/TcpServer.c</label>
        <link refid="_tcp_server_8c"/>
      </node>
      <node id="3">
        <label>src/Uart.c</label>
        <link refid="_uart_8c"/>
      </node>
      <node id="4">
        <label>src/main.c</label>
        <link refid="main_8c"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="_tcp_server_8h_1ad552e7688532cbbecd3967538ced06ac" prot="public" static="no">
        <name>WIFI_CONNECTED_BIT</name>
        <initializer>BIT0</initializer>
        <briefdescription>
<para>Uncomment the following line to enable Wi-Fi connection functionality. </para>
        </briefdescription>
        <detaileddescription>
<para>Event bit indicating a successful Wi-Fi connection. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TcpServer.h" line="43" column="9" bodyfile="include/TcpServer.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_tcp_server_8h_1a7d013b55e50dfbda0904f5f933b63ec4" prot="public" static="no">
        <name>WIFI_FAIL_BIT</name>
        <initializer>BIT1</initializer>
        <briefdescription>
<para>Event bit indicating a Wi-Fi connection failure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TcpServer.h" line="49" column="9" bodyfile="include/TcpServer.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_tcp_server_8h_1aef135ff19068a2ab235f21f2c833969b" prot="public" static="no">
        <name>TCP_TAG</name>
        <initializer>&quot;TCP_SERVER&quot;</initializer>
        <briefdescription>
<para>Tag for logging TCP server messages. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TcpServer.h" line="55" column="9" bodyfile="include/TcpServer.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_tcp_server_8h_1ac42367fe5c999ec6650de83e9d72fe8c" prot="public" static="no">
        <name>SERVER_PORT</name>
        <initializer>5166</initializer>
        <briefdescription>
<para>Port number for the TCP server. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TcpServer.h" line="61" column="9" bodyfile="include/TcpServer.h" bodystart="61" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="_tcp_server_8h_1a423bc60f42ad6bf912e07cd5320b1948" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Handle_Client</definition>
        <argsstring>(void *args)</argsstring>
        <name>Handle_Client</name>
        <param>
          <type>void *</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Handles client connections to the TCP server. </para>
        </briefdescription>
        <detaileddescription>
<para>This function processes communication with a connected client, handling data transmission and reception as required.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to additional arguments (optional).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Handles client connections to the TCP server.</para>
<para>This function receives and processes commands from the client, authenticates the user, and manages communication based on different states. It handles login, data requests, and exit commands.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket descriptor for the client. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TcpServer.h" line="71" column="6" bodyfile="src/TcpServer.c" bodystart="96" bodyend="223" declfile="include/TcpServer.h" declline="71" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_tcp_server_8h_1a71663496e793fd4869a37af2eaeb9dfb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Create_Server</definition>
        <argsstring>(void *pvParameter)</argsstring>
        <name>Create_Server</name>
        <param>
          <type>void *</type>
          <declname>pvParameter</declname>
        </param>
        <briefdescription>
<para>Creates and starts the TCP server. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets up the TCP server to listen for incoming client connections and handle them using the specified parameters.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pvParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to additional parameters for server setup (optional).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Creates and starts the TCP server.</para>
<para>This function sets up a TCP socket, binds it to a specified address and port, and listens for incoming connections. For each connection, a new task is created to handle the client.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pvParameter</parametername>
</parameternamelist>
<parameterdescription>
<para>Unused parameter for FreeRTOS task. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TcpServer.h" line="81" column="6" bodyfile="src/TcpServer.c" bodystart="32" bodyend="86" declfile="include/TcpServer.h" declline="81" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_tcp_server_8h_1a00e67904809f7a47e29ca050bcabbae2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int receive_data</definition>
        <argsstring>(int sock, char *buffer, size_t size, uint8_t *timeout_counter, uint8_t max_timeout)</argsstring>
        <name>receive_data</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>timeout_counter</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>max_timeout</declname>
        </param>
        <briefdescription>
<para>Receives data from a connected client. </para>
        </briefdescription>
        <detaileddescription>
<para>Reads data from a socket connection into the provided buffer, with support for timeout and retry mechanisms.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket descriptor for the client connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer where the received data will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of bytes to read. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a counter tracking timeout occurrences. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum number of allowable timeouts before returning an error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes received, or a negative value if an error occurs.</para>
</simplesect>
Receives data from a connected client.</para>
<para>This function receives data from the client and handles timeouts. If no data is received within a specified timeout period, it returns a timeout error.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sock</parametername>
</parameternamelist>
<parameterdescription>
<para>Socket descriptor for the client. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store received data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of the buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_counter</parametername>
</parameternamelist>
<parameterdescription>
<para>Counter to track consecutive timeouts. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum allowed consecutive timeouts before returning an error.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Length of received data, -1 if timeout occurs, or -2 if maximum timeouts reached. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TcpServer.h" line="96" column="5" bodyfile="src/TcpServer.c" bodystart="239" bodyend="251" declfile="include/TcpServer.h" declline="96" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="_tcp_server_8h_1af537437f191b86077cd5ae57370572b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConvertToJson</definition>
        <argsstring>(DbcStruct *dbc, char *jsonString)</argsstring>
        <name>ConvertToJson</name>
        <param>
          <type><ref refid="struct_dbc_struct" kindref="compound">DbcStruct</ref> *</type>
          <declname>dbc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>jsonString</declname>
        </param>
        <briefdescription>
<para>Converter for Dbc values to JSON. </para>
        </briefdescription>
        <detaileddescription>
<para>jSON Converter.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbc</parametername>
</parameternamelist>
<parameterdescription>
<para>dbcstruct pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jsonString</parametername>
</parameternamelist>
<parameterdescription>
<para>json string.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
Converter for Dbc values to JSON. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/TcpServer.h" line="116" column="6" bodyfile="src/TcpServer.c" bodystart="256" bodyend="365" declfile="include/TcpServer.h" declline="116" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="_tcp_server_8h_1a13ddbecdfd3a974bad6c7ff356cb4674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Tcp_Init</definition>
        <argsstring>()</argsstring>
        <name>Tcp_Init</name>
        <briefdescription>
<para>Initializes the TCP server. </para>
        </briefdescription>
        <detaileddescription>
<para>Configures the necessary components and prepares the ESP32 for running a TCP server.</para>
<para>Initializes the TCP server. </para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; Initialize Wi-Fi in access point and station mode.</para>
<para>&lt; Start the TCP server task.</para>
        </inbodydescription>
        <location file="include/TcpServer.h" line="123" column="6" bodyfile="src/TcpServer.c" bodystart="371" bodyend="378" declfile="include/TcpServer.h" declline="123" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>TCP server implementation for ESP32. </para>
    </briefdescription>
    <detaileddescription>
<para>This header file provides declarations for functions and macros used in implementing a TCP server on the ESP32. It supports handling client connections and data transfer over Wi-Fi.</para>
<para>Created on: 18 Dec 2024 <simplesect kind="author"><para>hakimmc </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDE_TCPSERVER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INCLUDE_TCPSERVER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//#define<sp/>WIFI_CONNECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;lwip/sockets.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/FreeRTOS.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_system.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_wifi_8h" kindref="compound">Wifi.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_ping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;ping/ping_sock.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;nvs_flash.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;freertos/event_groups.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_wifi.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_event.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;esp_log.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d2cc__lib_8h" kindref="compound">d2cc_lib.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="_tcp_server_8h_1ad552e7688532cbbecd3967538ced06ac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WIFI_CONNECTED_BIT<sp/>BIT0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="_tcp_server_8h_1a7d013b55e50dfbda0904f5f933b63ec4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WIFI_FAIL_BIT<sp/><sp/><sp/><sp/><sp/><sp/>BIT1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="_tcp_server_8h_1aef135ff19068a2ab235f21f2c833969b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TCP_TAG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;TCP_SERVER&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="_tcp_server_8h_1ac42367fe5c999ec6650de83e9d72fe8c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SERVER_PORT<sp/><sp/><sp/><sp/><sp/>5166</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_tcp_server_8h_1a423bc60f42ad6bf912e07cd5320b1948" kindref="member">Handle_Client</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>args);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_tcp_server_8h_1a71663496e793fd4869a37af2eaeb9dfb" kindref="member">Create_Server</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pvParameter);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_tcp_server_8h_1a00e67904809f7a47e29ca050bcabbae2" kindref="member">receive_data</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sock,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/>uint8_t*<sp/>timeout_counter,<sp/>uint8_t<sp/>max_timeout);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_tcp_server_8h_1a71663496e793fd4869a37af2eaeb9dfb" kindref="member">Create_Server</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>pvParameter);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_tcp_server_8h_1af537437f191b86077cd5ae57370572b1" kindref="member">ConvertToJson</ref>(<ref refid="struct_dbc_struct" kindref="compound">DbcStruct</ref><sp/>*dbc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*jsonString);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_tcp_server_8h_1a13ddbecdfd3a974bad6c7ff356cb4674" kindref="member">Tcp_Init</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_TCPSERVER_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="include/TcpServer.h"/>
  </compounddef>
</doxygen>
