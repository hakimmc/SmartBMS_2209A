.TH "include/TcpServer.h" 3 "Version v1.0.0" "SmartBMS_2209A" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/TcpServer.h \- TCP server implementation for ESP32\&.  

.SH SYNOPSIS
.br
.PP
\fR#include <lwip/sockets\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <errno\&.h>\fP
.br
\fR#include 'freertos/FreeRTOS\&.h'\fP
.br
\fR#include 'freertos/task\&.h'\fP
.br
\fR#include 'esp_system\&.h'\fP
.br
\fR#include 'Wifi\&.h'\fP
.br
\fR#include 'esp_ping\&.h'\fP
.br
\fR#include 'ping/ping_sock\&.h'\fP
.br
\fR#include 'nvs_flash\&.h'\fP
.br
\fR#include 'freertos/event_groups\&.h'\fP
.br
\fR#include 'esp_wifi\&.h'\fP
.br
\fR#include 'esp_event\&.h'\fP
.br
\fR#include 'd2cc_lib\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBWIFI_CONNECTED_BIT\fP   BIT0"
.br
.RI "Uncomment the following line to enable Wi-Fi connection functionality\&. "
.ti -1c
.RI "#define \fBWIFI_FAIL_BIT\fP   BIT1"
.br
.RI "Event bit indicating a Wi-Fi connection failure\&. "
.ti -1c
.RI "#define \fBTCP_TAG\fP   'TCP_SERVER'"
.br
.RI "Tag for logging TCP server messages\&. "
.ti -1c
.RI "#define \fBSERVER_PORT\fP   5166"
.br
.RI "Port number for the TCP server\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBHandle_Client\fP (void *args)"
.br
.RI "Handles client connections to the TCP server\&. "
.ti -1c
.RI "void \fBCreate_Server\fP (void *pvParameter)"
.br
.RI "Creates and starts the TCP server\&. "
.ti -1c
.RI "int \fBreceive_data\fP (int sock, char *buffer, size_t size, uint8_t *timeout_counter, uint8_t max_timeout)"
.br
.RI "Receives data from a connected client\&. "
.ti -1c
.RI "void \fBConvertToJson\fP (\fBDbcStruct\fP *dbc, char *jsonString)"
.br
.RI "Converter for Dbc values to JSON\&. "
.ti -1c
.RI "void \fBTcp_Init\fP ()"
.br
.RI "Initializes the TCP server\&. "
.in -1c
.SH "Detailed Description"
.PP 
TCP server implementation for ESP32\&. 

This header file provides declarations for functions and macros used in implementing a TCP server on the ESP32\&. It supports handling client connections and data transfer over Wi-Fi\&.

.PP
Created on: 18 Dec 2024 
.PP
\fBAuthor\fP
.RS 4
hakimmc 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define SERVER_PORT   5166"

.PP
Port number for the TCP server\&. 
.SS "#define TCP_TAG   'TCP_SERVER'"

.PP
Tag for logging TCP server messages\&. 
.SS "#define WIFI_CONNECTED_BIT   BIT0"

.PP
Uncomment the following line to enable Wi-Fi connection functionality\&. Event bit indicating a successful Wi-Fi connection\&. 
.SS "#define WIFI_FAIL_BIT   BIT1"

.PP
Event bit indicating a Wi-Fi connection failure\&. 
.SH "Function Documentation"
.PP 
.SS "void ConvertToJson (\fBDbcStruct\fP * dbc, char * jsonString)"

.PP
Converter for Dbc values to JSON\&. jSON Converter\&.

.PP
\fBParameters\fP
.RS 4
\fIdbc\fP dbcstruct pointer\&. 
.br
\fIjsonString\fP json string\&.
.RE
.PP
Converter for Dbc values to JSON\&. 
.SS "void Create_Server (void * pvParameter)"

.PP
Creates and starts the TCP server\&. Sets up the TCP server to listen for incoming client connections and handle them using the specified parameters\&.

.PP
\fBParameters\fP
.RS 4
\fIpvParameter\fP Pointer to additional parameters for server setup (optional)\&.
.RE
.PP
Creates and starts the TCP server\&.

.PP
This function sets up a TCP socket, binds it to a specified address and port, and listens for incoming connections\&. For each connection, a new task is created to handle the client\&.

.PP
\fBParameters\fP
.RS 4
\fIpvParameter\fP Unused parameter for FreeRTOS task\&. 
.RE
.PP

.SS "void Handle_Client (void * args)"

.PP
Handles client connections to the TCP server\&. This function processes communication with a connected client, handling data transmission and reception as required\&.

.PP
\fBParameters\fP
.RS 4
\fIargs\fP Pointer to additional arguments (optional)\&.
.RE
.PP
Handles client connections to the TCP server\&.

.PP
This function receives and processes commands from the client, authenticates the user, and manages communication based on different states\&. It handles login, data requests, and exit commands\&.

.PP
\fBParameters\fP
.RS 4
\fIargs\fP Socket descriptor for the client\&. 
.RE
.PP

.SS "int receive_data (int sock, char * buffer, size_t size, uint8_t * timeout_counter, uint8_t max_timeout)"

.PP
Receives data from a connected client\&. Reads data from a socket connection into the provided buffer, with support for timeout and retry mechanisms\&.

.PP
\fBParameters\fP
.RS 4
\fIsock\fP The socket descriptor for the client connection\&. 
.br
\fIbuffer\fP Pointer to the buffer where the received data will be stored\&. 
.br
\fIsize\fP The maximum number of bytes to read\&. 
.br
\fItimeout_counter\fP Pointer to a counter tracking timeout occurrences\&. 
.br
\fImax_timeout\fP The maximum number of allowable timeouts before returning an error\&. 
.RE
.PP
\fBReturns\fP
.RS 4
The number of bytes received, or a negative value if an error occurs\&.
.RE
.PP
Receives data from a connected client\&.

.PP
This function receives data from the client and handles timeouts\&. If no data is received within a specified timeout period, it returns a timeout error\&.

.PP
\fBParameters\fP
.RS 4
\fIsock\fP Socket descriptor for the client\&. 
.br
\fIbuffer\fP Buffer to store received data\&. 
.br
\fIsize\fP Size of the buffer\&. 
.br
\fItimeout_counter\fP Counter to track consecutive timeouts\&. 
.br
\fImax_timeout\fP Maximum allowed consecutive timeouts before returning an error\&.
.RE
.PP
\fBReturns\fP
.RS 4
Length of received data, -1 if timeout occurs, or -2 if maximum timeouts reached\&. 
.RE
.PP

.SS "void Tcp_Init ()"

.PP
Initializes the TCP server\&. Configures the necessary components and prepares the ESP32 for running a TCP server\&.

.PP
Initializes the TCP server\&. < Initialize Wi-Fi in access point and station mode\&.

.PP
< Start the TCP server task\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for SmartBMS_2209A from the source code\&.
