<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__tcp_server_8h" xml:lang="en-US">
<title>include/TcpServer.h File Reference</title>
<indexterm><primary>include/TcpServer.h</primary></indexterm>
<para>

<para>TCP server implementation for ESP32. </para>
 
</para>
<programlisting linenumbering="unnumbered">#include &lt;lwip/sockets.h&gt;<?linebreak?>#include &lt;esp_log.h&gt;<?linebreak?>#include &lt;string.h&gt;<?linebreak?>#include &lt;errno.h&gt;<?linebreak?>#include &quot;freertos/FreeRTOS.h&quot;<?linebreak?>#include &quot;freertos/task.h&quot;<?linebreak?>#include &quot;esp_system.h&quot;<?linebreak?>#include &quot;Wifi.h&quot;<?linebreak?>#include &quot;esp_ping.h&quot;<?linebreak?>#include &quot;ping/ping_sock.h&quot;<?linebreak?>#include &quot;nvs_flash.h&quot;<?linebreak?>#include &quot;freertos/event_groups.h&quot;<?linebreak?>#include &quot;esp_wifi.h&quot;<?linebreak?>#include &quot;esp_event.h&quot;<?linebreak?>#include &quot;d2cc_lib.h&quot;<?linebreak?></programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="__tcp_server_8h_1ad552e7688532cbbecd3967538ced06ac">WIFI_CONNECTED_BIT</link>&#160;&#160;&#160;BIT0</para>

<para>Uncomment the following line to enable Wi-Fi connection functionality. </para>
</listitem>
            <listitem><para>#define <link linkend="__tcp_server_8h_1a7d013b55e50dfbda0904f5f933b63ec4">WIFI_FAIL_BIT</link>&#160;&#160;&#160;BIT1</para>

<para>Event bit indicating a Wi-Fi connection failure. </para>
</listitem>
            <listitem><para>#define <link linkend="__tcp_server_8h_1aef135ff19068a2ab235f21f2c833969b">TCP_TAG</link>&#160;&#160;&#160;&quot;TCP_SERVER&quot;</para>

<para>Tag for logging TCP server messages. </para>
</listitem>
            <listitem><para>#define <link linkend="__tcp_server_8h_1ac42367fe5c999ec6650de83e9d72fe8c">SERVER_PORT</link>&#160;&#160;&#160;5166</para>

<para>Port number for the TCP server. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="__tcp_server_8h_1a423bc60f42ad6bf912e07cd5320b1948">Handle_Client</link> (void *args)</para>

<para>Handles client connections to the TCP server. </para>
</listitem>
            <listitem><para>void <link linkend="__tcp_server_8h_1a71663496e793fd4869a37af2eaeb9dfb">Create_Server</link> (void *pvParameter)</para>

<para>Creates and starts the TCP server. </para>
</listitem>
            <listitem><para>int <link linkend="__tcp_server_8h_1a00e67904809f7a47e29ca050bcabbae2">receive_data</link> (int sock, char *buffer, size_t size, uint8_t *timeout_counter, uint8_t max_timeout)</para>

<para>Receives data from a connected client. </para>
</listitem>
            <listitem><para>void <link linkend="__tcp_server_8h_1af537437f191b86077cd5ae57370572b1">ConvertToJson</link> (<link linkend="_struct_dbc_struct">DbcStruct</link> *dbc, char *jsonString)</para>

<para>Converter for Dbc values to JSON. </para>
</listitem>
            <listitem><para>void <link linkend="__tcp_server_8h_1a13ddbecdfd3a974bad6c7ff356cb4674">Tcp_Init</link> ()</para>

<para>Initializes the TCP server. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>TCP server implementation for ESP32. </para>

<para>This header file provides declarations for functions and macros used in implementing a TCP server on the ESP32. It supports handling client connections and data transfer over Wi-Fi.</para>

<para>Created on: 18 Dec 2024 <formalpara><title>Author</title>

<para>hakimmc </para>
</formalpara>
</para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="__tcp_server_8h_1ac42367fe5c999ec6650de83e9d72fe8c"/><section>
    <title>SERVER_PORT</title>
<indexterm><primary>SERVER_PORT</primary><secondary>TcpServer.h</secondary></indexterm>
<indexterm><primary>TcpServer.h</primary><secondary>SERVER_PORT</secondary></indexterm>
<para><computeroutput>#define SERVER_PORT&#160;&#160;&#160;5166</computeroutput></para><para>

<para>Port number for the TCP server. </para>
</para>
</section>
<anchor xml:id="__tcp_server_8h_1aef135ff19068a2ab235f21f2c833969b"/><section>
    <title>TCP_TAG</title>
<indexterm><primary>TCP_TAG</primary><secondary>TcpServer.h</secondary></indexterm>
<indexterm><primary>TcpServer.h</primary><secondary>TCP_TAG</secondary></indexterm>
<para><computeroutput>#define TCP_TAG&#160;&#160;&#160;&quot;TCP_SERVER&quot;</computeroutput></para><para>

<para>Tag for logging TCP server messages. </para>
</para>
</section>
<anchor xml:id="__tcp_server_8h_1ad552e7688532cbbecd3967538ced06ac"/><section>
    <title>WIFI_CONNECTED_BIT</title>
<indexterm><primary>WIFI_CONNECTED_BIT</primary><secondary>TcpServer.h</secondary></indexterm>
<indexterm><primary>TcpServer.h</primary><secondary>WIFI_CONNECTED_BIT</secondary></indexterm>
<para><computeroutput>#define WIFI_CONNECTED_BIT&#160;&#160;&#160;BIT0</computeroutput></para><para>

<para>Uncomment the following line to enable Wi-Fi connection functionality. </para>
</para>

<para>Event bit indicating a successful Wi-Fi connection. </para>
</section>
<anchor xml:id="__tcp_server_8h_1a7d013b55e50dfbda0904f5f933b63ec4"/><section>
    <title>WIFI_FAIL_BIT</title>
<indexterm><primary>WIFI_FAIL_BIT</primary><secondary>TcpServer.h</secondary></indexterm>
<indexterm><primary>TcpServer.h</primary><secondary>WIFI_FAIL_BIT</secondary></indexterm>
<para><computeroutput>#define WIFI_FAIL_BIT&#160;&#160;&#160;BIT1</computeroutput></para><para>

<para>Event bit indicating a Wi-Fi connection failure. </para>
</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="__tcp_server_8h_1af537437f191b86077cd5ae57370572b1"/><section>
    <title>ConvertToJson()</title>
<indexterm><primary>ConvertToJson</primary><secondary>TcpServer.h</secondary></indexterm>
<indexterm><primary>TcpServer.h</primary><secondary>ConvertToJson</secondary></indexterm>
<para><computeroutput>void ConvertToJson (<link linkend="_struct_dbc_struct">DbcStruct</link> * dbc, char * jsonString)</computeroutput></para><para>

<para>Converter for Dbc values to JSON. </para>
</para>

<para>jSON Converter.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>dbc</entry><entry>
<para>dbcstruct pointer. </para>
</entry>
                            </row>
                            <row>
<entry>jsonString</entry><entry>
<para>json string.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Converter for Dbc values to JSON. </para>
</section>
<anchor xml:id="__tcp_server_8h_1a71663496e793fd4869a37af2eaeb9dfb"/><section>
    <title>Create_Server()</title>
<indexterm><primary>Create_Server</primary><secondary>TcpServer.h</secondary></indexterm>
<indexterm><primary>TcpServer.h</primary><secondary>Create_Server</secondary></indexterm>
<para><computeroutput>void Create_Server (void * pvParameter)</computeroutput></para><para>

<para>Creates and starts the TCP server. </para>
</para>

<para>Sets up the TCP server to listen for incoming client connections and handle them using the specified parameters.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pvParameter</entry><entry>
<para>Pointer to additional parameters for server setup (optional).</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Creates and starts the TCP server.</para>

<para>This function sets up a TCP socket, binds it to a specified address and port, and listens for incoming connections. For each connection, a new task is created to handle the client.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>pvParameter</entry><entry>
<para>Unused parameter for FreeRTOS task. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__tcp_server_8h_1a423bc60f42ad6bf912e07cd5320b1948"/><section>
    <title>Handle_Client()</title>
<indexterm><primary>Handle_Client</primary><secondary>TcpServer.h</secondary></indexterm>
<indexterm><primary>TcpServer.h</primary><secondary>Handle_Client</secondary></indexterm>
<para><computeroutput>void Handle_Client (void * args)</computeroutput></para><para>

<para>Handles client connections to the TCP server. </para>
</para>

<para>This function processes communication with a connected client, handling data transmission and reception as required.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>args</entry><entry>
<para>Pointer to additional arguments (optional).</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Handles client connections to the TCP server.</para>

<para>This function receives and processes commands from the client, authenticates the user, and manages communication based on different states. It handles login, data requests, and exit commands.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>args</entry><entry>
<para>Socket descriptor for the client. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="__tcp_server_8h_1a00e67904809f7a47e29ca050bcabbae2"/><section>
    <title>receive_data()</title>
<indexterm><primary>receive_data</primary><secondary>TcpServer.h</secondary></indexterm>
<indexterm><primary>TcpServer.h</primary><secondary>receive_data</secondary></indexterm>
<para><computeroutput>int receive_data (int sock, char * buffer, size_t size, uint8_t * timeout_counter, uint8_t max_timeout)</computeroutput></para><para>

<para>Receives data from a connected client. </para>
</para>

<para>Reads data from a socket connection into the provided buffer, with support for timeout and retry mechanisms.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sock</entry><entry>
<para>The socket descriptor for the client connection. </para>
</entry>
                            </row>
                            <row>
<entry>buffer</entry><entry>
<para>Pointer to the buffer where the received data will be stored. </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>The maximum number of bytes to read. </para>
</entry>
                            </row>
                            <row>
<entry>timeout_counter</entry><entry>
<para>Pointer to a counter tracking timeout occurrences. </para>
</entry>
                            </row>
                            <row>
<entry>max_timeout</entry><entry>
<para>The maximum number of allowable timeouts before returning an error. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The number of bytes received, or a negative value if an error occurs.</para>
</formalpara>
Receives data from a connected client.</para>

<para>This function receives data from the client and handles timeouts. If no data is received within a specified timeout period, it returns a timeout error.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>sock</entry><entry>
<para>Socket descriptor for the client. </para>
</entry>
                            </row>
                            <row>
<entry>buffer</entry><entry>
<para>Buffer to store received data. </para>
</entry>
                            </row>
                            <row>
<entry>size</entry><entry>
<para>Size of the buffer. </para>
</entry>
                            </row>
                            <row>
<entry>timeout_counter</entry><entry>
<para>Counter to track consecutive timeouts. </para>
</entry>
                            </row>
                            <row>
<entry>max_timeout</entry><entry>
<para>Maximum allowed consecutive timeouts before returning an error.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Length of received data, -1 if timeout occurs, or -2 if maximum timeouts reached. </para>
</formalpara>
</para>
</section>
<anchor xml:id="__tcp_server_8h_1a13ddbecdfd3a974bad6c7ff356cb4674"/><section>
    <title>Tcp_Init()</title>
<indexterm><primary>Tcp_Init</primary><secondary>TcpServer.h</secondary></indexterm>
<indexterm><primary>TcpServer.h</primary><secondary>Tcp_Init</secondary></indexterm>
<para><computeroutput>void Tcp_Init ( )</computeroutput></para><para>

<para>Initializes the TCP server. </para>
</para>

<para>Configures the necessary components and prepares the ESP32 for running a TCP server.</para>

<para>Initializes the TCP server. </para>

<para>&lt; Initialize Wi-Fi in access point and station mode.</para>

<para>&lt; Start the TCP server task.</para>
</section>
</section>
</section>
